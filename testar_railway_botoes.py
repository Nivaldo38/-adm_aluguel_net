#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para testar problemas espec√≠ficos dos bot√µes no Railway
"""

import os
import sys
from pathlib import Path

def verificar_configuracao_railway():
    """Verifica se as configura√ß√µes do Railway est√£o corretas"""
    print("üîç VERIFICANDO CONFIGURA√á√ÉO DO RAILWAY")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    print("\nüìã Vari√°veis de Ambiente:")
    
    # SECRET_KEY √© obrigat√≥ria
    secret_key = os.getenv('SECRET_KEY')
    if secret_key:
        print("‚úÖ SECRET_KEY configurada")
    else:
        print("‚ùå SECRET_KEY N√ÉO CONFIGURADA - Isso pode causar problemas!")
    
    # DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        print("‚úÖ DATABASE_URL configurada")
    else:
        print("‚ö†Ô∏è DATABASE_URL n√£o configurada - usando SQLite local")
    
    # Email (opcional)
    email_host = os.getenv('EMAIL_HOST')
    if email_host:
        print("‚úÖ EMAIL_HOST configurado")
    else:
        print("‚ö†Ô∏è EMAIL_HOST n√£o configurado - notifica√ß√µes n√£o funcionar√£o")
    
    # D4Sign (opcional)
    d4sign_token = os.getenv('D4SIGN_API_TOKEN')
    if d4sign_token:
        print("‚úÖ D4SIGN_API_TOKEN configurado")
    else:
        print("‚ö†Ô∏è D4SIGN_API_TOKEN n√£o configurado - assinatura digital n√£o funcionar√°")

def verificar_arquivos_estaticos():
    """Verifica se os arquivos est√°ticos est√£o acess√≠veis"""
    print("\nüìÅ Verificando arquivos est√°ticos:")
    
    # Verificar se o diret√≥rio static existe
    static_dir = Path("app/static")
    if static_dir.exists():
        print("‚úÖ Diret√≥rio static existe")
        
        # Verificar arquivos importantes
        files_to_check = [
            "manifest.json",
            "sw.js"
        ]
        
        for file in files_to_check:
            file_path = static_dir / file
            if file_path.exists():
                print(f"‚úÖ {file} existe")
            else:
                print(f"‚ùå {file} n√£o encontrado")
    else:
        print("‚ùå Diret√≥rio static n√£o existe")

def verificar_templates():
    """Verifica se os templates est√£o corretos"""
    print("\nüé® Verificando templates:")
    
    templates_dir = Path("app/templates")
    if templates_dir.exists():
        print("‚úÖ Diret√≥rio templates existe")
        
        # Verificar templates importantes
        important_templates = [
            "base_modern.html",
            "index.html",
            "listar_contratos.html",
            "listar_boletos.html"
        ]
        
        for template in important_templates:
            template_path = templates_dir / template
            if template_path.exists():
                print(f"‚úÖ {template} existe")
                
                # Verificar se tem JavaScript
                with open(template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if '<script>' in content:
                        print(f"  ‚úÖ {template} tem JavaScript")
                    else:
                        print(f"  ‚ö†Ô∏è {template} n√£o tem JavaScript")
            else:
                print(f"‚ùå {template} n√£o encontrado")
    else:
        print("‚ùå Diret√≥rio templates n√£o existe")

def testar_app_local():
    """Testa se o app funciona localmente"""
    print("\nüöÄ Testando aplica√ß√£o local:")
    
    try:
        # Importar app
        from app import app
        
        # Testar se as rotas principais existem
        with app.test_client() as client:
            # Testar rota principal
            response = client.get('/')
            if response.status_code == 200:
                print("‚úÖ Rota principal funciona")
            else:
                print(f"‚ùå Rota principal retornou {response.status_code}")
            
            # Testar rota de locais
            response = client.get('/locais')
            if response.status_code == 200:
                print("‚úÖ Rota de locais funciona")
            else:
                print(f"‚ùå Rota de locais retornou {response.status_code}")
            
            # Testar rota de inquilinos
            response = client.get('/inquilinos')
            if response.status_code == 200:
                print("‚úÖ Rota de inquilinos funciona")
            else:
                print(f"‚ùå Rota de inquilinos retornou {response.status_code}")
            
            # Testar rota de contratos
            response = client.get('/listar_contratos')
            if response.status_code == 200:
                print("‚úÖ Rota de contratos funciona")
            else:
                print(f"‚ùå Rota de contratos retornou {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå Erro ao testar aplica√ß√£o: {e}")

def verificar_problemas_comuns():
    """Verifica problemas comuns que podem afetar os bot√µes"""
    print("\nüîß Verificando problemas comuns:")
    
    # Verificar se h√° conflitos de CSS/JS
    base_template = Path("app/templates/base_modern.html")
    if base_template.exists():
        with open(base_template, 'r', encoding='utf-8') as f:
            content = f.read()
            
            # Verificar se Tailwind CSS est√° carregado
            if 'tailwindcss.com' in content:
                print("‚úÖ Tailwind CSS est√° sendo carregado")
            else:
                print("‚ùå Tailwind CSS n√£o encontrado")
            
            # Verificar se Font Awesome est√° carregado
            if 'font-awesome' in content:
                print("‚úÖ Font Awesome est√° sendo carregado")
            else:
                print("‚ùå Font Awesome n√£o encontrado")
            
            # Verificar se h√° JavaScript
            if '<script>' in content:
                print("‚úÖ JavaScript est√° presente")
            else:
                print("‚ùå JavaScript n√£o encontrado")

def mostrar_solucoes():
    """Mostra solu√ß√µes para problemas comuns"""
    print("\nüí° SOLU√á√ïES PARA PROBLEMAS DE BOT√ïES:")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ **Problema: Bot√µes n√£o respondem ao clique**")
    print("   Solu√ß√£o: Verificar se o JavaScript est√° carregando")
    print("   - Abra o console do navegador (F12)")
    print("   - Verifique se h√° erros de JavaScript")
    print("   - Recarregue a p√°gina (Ctrl+F5)")
    
    print("\n2Ô∏è‚É£ **Problema: Links n√£o funcionam**")
    print("   Solu√ß√£o: Verificar se as rotas est√£o corretas")
    print("   - Teste acessando diretamente a URL")
    print("   - Verifique se o Railway est√° online")
    print("   - Aguarde 2-3 minutos ap√≥s deploy")
    
    print("\n3Ô∏è‚É£ **Problema: Formul√°rios n√£o salvam**")
    print("   Solu√ß√£o: Verificar configura√ß√£o do banco")
    print("   - Configure DATABASE_URL no Railway")
    print("   - Verifique se SECRET_KEY est√° configurada")
    print("   - Teste localmente primeiro")
    
    print("\n4Ô∏è‚É£ **Problema: CSS n√£o carrega**")
    print("   Solu√ß√£o: Verificar CDNs")
    print("   - Tailwind CSS est√° sendo carregado via CDN")
    print("   - Font Awesome est√° sendo carregado via CDN")
    print("   - Se n√£o carregar, pode ser problema de internet")
    
    print("\n5Ô∏è‚É£ **Problema: Sistema lento**")
    print("   Solu√ß√£o: Aguardar inicializa√ß√£o")
    print("   - Railway pode demorar para inicializar")
    print("   - Primeira requisi√ß√£o pode ser lenta")
    print("   - Verificar logs no Railway")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DIAGN√ìSTICO DE PROBLEMAS DOS BOT√ïES NO RAILWAY")
    print("=" * 60)
    
    # Verificar configura√ß√£o
    verificar_configuracao_railway()
    
    # Verificar arquivos
    verificar_arquivos_estaticos()
    verificar_templates()
    
    # Verificar problemas comuns
    verificar_problemas_comuns()
    
    # Testar app local
    testar_app_local()
    
    # Mostrar solu√ß√µes
    mostrar_solucoes()
    
    print("\n" + "=" * 60)
    print("üìã RESUMO:")
    print("‚úÖ Se todas as verifica√ß√µes passaram, o problema pode ser:")
    print("   - Cache do navegador (Ctrl+F5)")
    print("   - Railway ainda inicializando (aguarde 2-3 min)")
    print("   - Problema tempor√°rio de rede")
    print("   - Vari√°veis de ambiente n√£o configuradas")
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("1. Configure SECRET_KEY no Railway")
    print("2. Fa√ßa redeploy no Railway")
    print("3. Aguarde 2-3 minutos")
    print("4. Teste acessando a URL")
    print("5. Se n√£o funcionar, verifique os logs no Railway")

if __name__ == "__main__":
    main() 