#!/usr/bin/env python3
"""
Script de Verifica√ß√£o de Sa√∫de do Sistema
Verifica se tudo est√° funcionando antes do deploy
"""

import os
import sys
import sqlite3
from datetime import datetime

def check_database():
    """Verifica se o banco de dados est√° funcionando"""
    print("üîç Verificando banco de dados...")
    
    try:
        db_path = 'adm_aluguel.db'
        if not os.path.exists(db_path):
            print("‚ùå Banco de dados n√£o encontrado")
            return False
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Verificar tabelas principais
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = ['local', 'unidade', 'inquilino', 'contrato', 'boleto']
        missing_tables = [table for table in required_tables if table not in tables]
        
        if missing_tables:
            print(f"‚ùå Tabelas faltando: {missing_tables}")
            return False
        
        # Verificar dados
        cursor.execute("SELECT COUNT(*) FROM local")
        locais_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM inquilino")
        inquilinos_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM contrato")
        contratos_count = cursor.fetchone()[0]
        
        print(f"‚úÖ Banco OK - Locais: {locais_count}, Inquilinos: {inquilinos_count}, Contratos: {contratos_count}")
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no banco: {e}")
        return False

def check_directories():
    """Verifica se os diret√≥rios necess√°rios existem"""
    print("üìÅ Verificando diret√≥rios...")
    
    required_dirs = [
        'app/templates',
        'app/static',
        'contracts',
        'backups'
    ]
    
    missing_dirs = []
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            missing_dirs.append(dir_path)
    
    if missing_dirs:
        print(f"‚ùå Diret√≥rios faltando: {missing_dirs}")
        return False
    
    print("‚úÖ Todos os diret√≥rios existem")
    return True

def check_files():
    """Verifica se os arquivos principais existem"""
    print("üìÑ Verificando arquivos...")
    
    required_files = [
        'run.py',
        'requirements.txt',
        'Procfile',
        'runtime.txt',
        'app/__init__.py',
        'app/models.py',
        'app/routes.py'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå Arquivos faltando: {missing_files}")
        return False
    
    print("‚úÖ Todos os arquivos principais existem")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o no requirements.txt"""
    print("üì¶ Verificando depend√™ncias...")
    
    try:
        with open('requirements.txt', 'r') as f:
            requirements = f.read()
        
        required_packages = [
            'Flask',
            'Flask-SQLAlchemy',
            'Werkzeug',
            'gunicorn',
            'schedule'
        ]
        
        missing_packages = []
        for package in required_packages:
            if package not in requirements:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"‚ùå Pacotes faltando: {missing_packages}")
            return False
        
        print("‚úÖ Todas as depend√™ncias est√£o listadas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar requirements.txt: {e}")
        return False

def check_environment():
    """Verifica vari√°veis de ambiente"""
    print("üåç Verificando vari√°veis de ambiente...")
    
    # Verificar se arquivo .env existe (opcional)
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env encontrado")
    else:
        print("‚ö†Ô∏è Arquivo .env n√£o encontrado (normal para produ√ß√£o)")
    
    # Verificar vari√°veis cr√≠ticas
    critical_vars = ['EMAIL_HOST', 'EMAIL_USER', 'EMAIL_PASSWORD']
    missing_vars = []
    
    for var in critical_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è Vari√°veis de ambiente faltando: {missing_vars}")
        print("   Configure no Railway ap√≥s o deploy")
    else:
        print("‚úÖ Vari√°veis de ambiente configuradas")
    
    return True

def check_railway_config():
    """Verifica arquivos de configura√ß√£o do Railway"""
    print("üöÇ Verificando configura√ß√£o do Railway...")
    
    railway_files = ['Procfile', 'runtime.txt', 'gunicorn.conf.py']
    missing_files = []
    
    for file_path in railway_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå Arquivos do Railway faltando: {missing_files}")
        return False
    
    print("‚úÖ Configura√ß√£o do Railway OK")
    return True

def main():
    """Fun√ß√£o principal"""
    print("üè• Verifica√ß√£o de Sa√∫de do Sistema")
    print("=" * 50)
    print(f"Data/Hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    checks = [
        ("Arquivos", check_files),
        ("Diret√≥rios", check_directories),
        ("Banco de Dados", check_database),
        ("Depend√™ncias", check_dependencies),
        ("Vari√°veis de Ambiente", check_environment),
        ("Configura√ß√£o Railway", check_railway_config)
    ]
    
    results = []
    for name, check_func in checks:
        print(f"\n{name}:")
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o: {e}")
            results.append((name, False))
    
    print("\n" + "=" * 50)
    print("üìä RESUMO:")
    
    all_passed = True
    for name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"  {name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    
    if all_passed:
        print("üéâ SISTEMA PRONTO PARA DEPLOY!")
        print("‚úÖ Todas as verifica√ß√µes passaram")
        print("\nPr√≥ximos passos:")
        print("1. Fazer push para GitHub")
        print("2. Conectar no Railway")
        print("3. Configurar vari√°veis de ambiente")
        print("4. Deploy autom√°tico!")
    else:
        print("‚ö†Ô∏è CORRE√á√ïES NECESS√ÅRIAS")
        print("‚ùå Algumas verifica√ß√µes falharam")
        print("\nCorrija os problemas antes do deploy")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 