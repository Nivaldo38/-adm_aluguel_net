#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar o status atual do Railway
"""

import os
import sys
from pathlib import Path

def verificar_status_atual():
    """Verifica o status atual do sistema"""
    print("üîç VERIFICANDO STATUS ATUAL DO RAILWAY")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    print("\nüìã Vari√°veis de Ambiente Atuais:")
    
    secret_key = os.getenv('SECRET_KEY')
    if secret_key:
        print("‚úÖ SECRET_KEY configurada")
        print(f"   Valor: {secret_key[:10]}... (primeiros 10 caracteres)")
    else:
        print("‚ùå SECRET_KEY n√£o encontrada")
    
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        print("‚úÖ DATABASE_URL configurada")
    else:
        print("‚ö†Ô∏è DATABASE_URL n√£o configurada")
    
    # Verificar outras vari√°veis
    email_host = os.getenv('EMAIL_HOST')
    if email_host:
        print("‚úÖ EMAIL_HOST configurado")
    else:
        print("‚ö†Ô∏è EMAIL_HOST n√£o configurado")
    
    d4sign_token = os.getenv('D4SIGN_API_TOKEN')
    if d4sign_token:
        print("‚úÖ D4SIGN_API_TOKEN configurado")
    else:
        print("‚ö†Ô∏è D4SIGN_API_TOKEN n√£o configurado")

def verificar_problemas_comuns():
    """Verifica problemas comuns que podem afetar os bot√µes"""
    print("\nüîß VERIFICANDO PROBLEMAS COMUNS:")
    
    # Verificar se h√° erros no c√≥digo
    print("\n1Ô∏è‚É£ Verificando arquivos principais:")
    
    files_to_check = [
        "app/__init__.py",
        "app/routes.py",
        "app/models.py",
        "run.py"
    ]
    
    for file in files_to_check:
        if Path(file).exists():
            print(f"‚úÖ {file} existe")
        else:
            print(f"‚ùå {file} n√£o encontrado")
    
    # Verificar templates
    print("\n2Ô∏è‚É£ Verificando templates:")
    templates_dir = Path("app/templates")
    if templates_dir.exists():
        important_templates = [
            "base_modern.html",
            "index.html",
            "listar_contratos.html"
        ]
        
        for template in important_templates:
            template_path = templates_dir / template
            if template_path.exists():
                print(f"‚úÖ {template} existe")
            else:
                print(f"‚ùå {template} n√£o encontrado")
    else:
        print("‚ùå Diret√≥rio templates n√£o existe")

def testar_app_local():
    """Testa se o app funciona localmente"""
    print("\nüöÄ TESTANDO APLICA√á√ÉO LOCAL:")
    
    try:
        from app import app
        
        with app.test_client() as client:
            # Testar rotas principais
            routes_to_test = [
                ('/', 'P√°gina inicial'),
                ('/locais', 'Listar locais'),
                ('/inquilinos', 'Listar inquilinos'),
                ('/listar_contratos', 'Listar contratos'),
                ('/boletos', 'Listar boletos')
            ]
            
            for route, description in routes_to_test:
                try:
                    response = client.get(route)
                    if response.status_code == 200:
                        print(f"‚úÖ {description} funciona")
                    else:
                        print(f"‚ùå {description} retornou {response.status_code}")
                except Exception as e:
                    print(f"‚ùå Erro em {description}: {e}")
                    
    except Exception as e:
        print(f"‚ùå Erro ao testar aplica√ß√£o: {e}")

def mostrar_diagnostico():
    """Mostra diagn√≥stico baseado nos problemas encontrados"""
    print("\nüí° DIAGN√ìSTICO:")
    print("=" * 30)
    
    print("\nüéØ Se SECRET_KEY est√° configurada mas os bot√µes n√£o funcionam:")
    print("1. **Cache do navegador** - Limpe com Ctrl+F5")
    print("2. **Railway ainda inicializando** - Aguarde 2-3 minutos")
    print("3. **Problema de rede** - Teste em outro navegador")
    print("4. **Erro no c√≥digo** - Verifique logs do Railway")
    print("5. **Problema de JavaScript** - Verifique console F12")

def mostrar_solucoes_especificas():
    """Mostra solu√ß√µes espec√≠ficas"""
    print("\nüîß SOLU√á√ïES ESPEC√çFICAS:")
    print("=" * 30)
    
    print("\n1Ô∏è‚É£ **Se a p√°gina carrega mas os bot√µes n√£o funcionam:**")
    print("   - Abra o console do navegador (F12)")
    print("   - Verifique se h√° erros de JavaScript")
    print("   - Recarregue a p√°gina (Ctrl+F5)")
    
    print("\n2Ô∏è‚É£ **Se a p√°gina n√£o carrega:**")
    print("   - Verifique os logs no Railway")
    print("   - Teste a URL diretamente")
    print("   - Aguarde mais tempo (Railway pode demorar)")
    
    print("\n3Ô∏è‚É£ **Se formul√°rios n√£o salvam:**")
    print("   - Verifique se DATABASE_URL est√° configurada")
    print("   - Teste localmente primeiro")
    print("   - Verifique logs de erro")
    
    print("\n4Ô∏è‚É£ **Se links n√£o funcionam:**")
    print("   - Teste acessando URLs diretamente")
    print("   - Verifique se o Railway est√° online")
    print("   - Aguarde inicializa√ß√£o completa")

def verificar_logs_railway():
    """Instru√ß√µes para verificar logs no Railway"""
    print("\nüìã COMO VERIFICAR LOGS NO RAILWAY:")
    print("=" * 40)
    
    print("\n1. Acesse: https://railway.app")
    print("2. Entre no seu projeto")
    print("3. V√° em 'Deployments'")
    print("4. Clique no √∫ltimo deploy")
    print("5. Clique em 'View Logs'")
    print("6. Procure por erros em vermelho")
    
    print("\nüîç O que procurar nos logs:")
    print("- Erros de importa√ß√£o")
    print("- Erros de banco de dados")
    print("- Erros de vari√°veis de ambiente")
    print("- Erros de depend√™ncias")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DIAGN√ìSTICO COMPLETO - RAILWAY")
    print("=" * 50)
    
    # Verificar status atual
    verificar_status_atual()
    
    # Verificar problemas comuns
    verificar_problemas_comuns()
    
    # Testar app local
    testar_app_local()
    
    # Mostrar diagn√≥stico
    mostrar_diagnostico()
    
    # Mostrar solu√ß√µes espec√≠ficas
    mostrar_solucoes_especificas()
    
    # Instru√ß√µes para logs
    verificar_logs_railway()
    
    print("\n" + "=" * 50)
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. Verifique os logs no Railway")
    print("2. Teste a URL diretamente")
    print("3. Limpe cache do navegador (Ctrl+F5)")
    print("4. Teste em outro navegador")
    print("5. Aguarde mais tempo se necess√°rio")
    
    print("\nüí° Se ainda n√£o funcionar:")
    print("- Copie os erros dos logs")
    print("- Teste localmente primeiro")
    print("- Verifique se h√° mudan√ßas recentes")

if __name__ == "__main__":
    main() 