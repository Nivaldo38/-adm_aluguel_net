#!/usr/bin/env python3
"""
Script de teste para verificar se o cadastro de inquilinos mant√©m os dados preenchidos
em caso de erro de valida√ß√£o.
"""

import requests
import time

def testar_cadastro_inquilino():
    """Testa o cadastro de inquilinos com dados inv√°lidos para verificar se mant√©m os dados preenchidos."""
    
    base_url = "http://127.0.0.1:5000"
    
    print("üß™ Testando cadastro de inquilinos...")
    print("=" * 50)
    
    # Dados de teste com CPF inv√°lido (menos de 11 d√≠gitos)
    dados_teste = {
        'nome': 'Jo√£o Silva',
        'cpf': '1234567890',  # CPF inv√°lido - apenas 10 d√≠gitos
        'data_nascimento': '1990-05-15',
        'idade': '33',
        'endereco': 'Rua das Flores, 123',
        'cep': '74000000',
        'telefone': '62999999999',
        'email': 'joao@email.com',
        'unidade_id': '1',
        'local_id': '1'
    }
    
    try:
        # Fazer POST para cadastrar inquilino
        print("üìù Enviando dados de teste...")
        response = requests.post(f"{base_url}/cadastrar_inquilino", data=dados_teste)
        
        if response.status_code == 200:
            print("‚úÖ P√°gina carregada com sucesso")
            
            # Verificar se os dados foram mantidos no formul√°rio
            content = response.text
            
            # Verificar se os campos mant√™m os valores
            campos_verificados = []
            
            if 'value="Jo√£o Silva"' in content:
                campos_verificados.append("‚úÖ Nome mantido")
            else:
                campos_verificados.append("‚ùå Nome n√£o mantido")
                
            if 'value="1234567890"' in content:
                campos_verificados.append("‚úÖ CPF mantido")
            else:
                campos_verificados.append("‚ùå CPF n√£o mantido")
                
            if 'value="1990-05-15"' in content:
                campos_verificados.append("‚úÖ Data de nascimento mantida")
            else:
                campos_verificados.append("‚ùå Data de nascimento n√£o mantida")
                
            if 'value="33"' in content:
                campos_verificados.append("‚úÖ Idade mantida")
            else:
                campos_verificados.append("‚ùå Idade n√£o mantida")
                
            if 'value="Rua das Flores, 123"' in content:
                campos_verificados.append("‚úÖ Endere√ßo mantido")
            else:
                campos_verificados.append("‚ùå Endere√ßo n√£o mantido")
                
            if 'value="74000000"' in content:
                campos_verificados.append("‚úÖ CEP mantido")
            else:
                campos_verificados.append("‚ùå CEP n√£o mantido")
                
            if 'value="62999999999"' in content:
                campos_verificados.append("‚úÖ Telefone mantido")
            else:
                campos_verificados.append("‚ùå Telefone n√£o mantido")
                
            if 'value="joao@email.com"' in content:
                campos_verificados.append("‚úÖ Email mantido")
            else:
                campos_verificados.append("‚ùå Email n√£o mantido")
            
            print("\nüìã Resultado da verifica√ß√£o:")
            for campo in campos_verificados:
                print(f"  {campo}")
                
            # Verificar se h√° mensagem de erro
            if 'CPF inv√°lido' in content:
                print("\n‚úÖ Mensagem de erro exibida corretamente")
            else:
                print("\n‚ùå Mensagem de erro n√£o encontrada")
                
        else:
            print(f"‚ùå Erro ao acessar p√°gina: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro de conex√£o. Certifique-se de que o servidor est√° rodando.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

def testar_cadastro_sucesso():
    """Testa o cadastro de inquilinos com dados v√°lidos."""
    
    base_url = "http://127.0.0.1:5000"
    
    print("\nüß™ Testando cadastro com dados v√°lidos...")
    print("=" * 50)
    
    # Dados v√°lidos para teste
    dados_validos = {
        'nome': 'Maria Santos',
        'cpf': '12345678909',  # CPF v√°lido (fict√≠cio)
        'data_nascimento': '1985-08-20',
        'idade': '38',
        'endereco': 'Av. Principal, 456',
        'cep': '74000001',
        'telefone': '62988888888',
        'email': 'maria@email.com',
        'unidade_id': '1',
        'local_id': '1'
    }
    
    try:
        response = requests.post(f"{base_url}/cadastrar_inquilino", data=dados_validos)
        
        if response.status_code == 302:  # Redirecionamento ap√≥s sucesso
            print("‚úÖ Cadastro realizado com sucesso (redirecionamento)")
        elif response.status_code == 200:
            print("‚ö†Ô∏è P√°gina retornada (poss√≠vel erro de valida√ß√£o)")
        else:
            print(f"‚ùå Status inesperado: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Erro de conex√£o. Certifique-se de que o servidor est√° rodando.")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando testes de cadastro de inquilinos...")
    print("=" * 60)
    
    # Aguardar um pouco para o servidor inicializar
    print("‚è≥ Aguardando servidor inicializar...")
    time.sleep(2)
    
    # Testar cadastro com dados inv√°lidos
    testar_cadastro_inquilino()
    
    # Testar cadastro com dados v√°lidos
    testar_cadastro_sucesso()
    
    print("\n" + "=" * 60)
    print("üèÅ Testes conclu√≠dos!")
    print("\nüìù Instru√ß√µes:")
    print("1. Acesse http://127.0.0.1:5000/cadastrar_inquilino")
    print("2. Preencha alguns campos e deixe outros em branco")
    print("3. Clique em 'Cadastrar Inquilino'")
    print("4. Verifique se os dados preenchidos foram mantidos")
    print("5. Apenas os campos em branco devem mostrar erro") 