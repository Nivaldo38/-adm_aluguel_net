#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste espec√≠fico para dashboard avan√ßado e relat√≥rios
"""

import os
import sys
from pathlib import Path

def testar_rotas_especificas():
    """Testa as rotas espec√≠ficas que est√£o com problemas"""
    print("üîç TESTE ESPEC√çFICO - DASHBOARD E RELAT√ìRIOS")
    print("=" * 50)
    
    try:
        from app import app
        
        with app.test_client() as client:
            # Testar rotas espec√≠ficas
            rotas_problematicas = [
                ('/dashboard_avancado', 'Dashboard Avan√ßado'),
                ('/relatorios', 'Relat√≥rios')
            ]
            
            for rota, descricao in rotas_problematicas:
                try:
                    response = client.get(rota)
                    if response.status_code == 200:
                        content = response.get_data(as_text=True)
                        
                        # Verificar elementos espec√≠ficos
                        has_buttons = 'href=' in content or 'onclick=' in content
                        has_js = '<script>' in content
                        has_tailwind = 'tailwind' in content.lower()
                        has_fontawesome = 'fas fa-' in content
                        
                        print(f"\n‚úÖ {descricao}:")
                        print(f"   - Status: {response.status_code}")
                        print(f"   - Tem bot√µes: {'‚úÖ' if has_buttons else '‚ùå'}")
                        print(f"   - Tem JavaScript: {'‚úÖ' if has_js else '‚ùå'}")
                        print(f"   - Tem Tailwind: {'‚úÖ' if has_tailwind else '‚ùå'}")
                        print(f"   - Tem FontAwesome: {'‚úÖ' if has_fontawesome else '‚ùå'}")
                        
                        if not has_buttons:
                            print(f"   ‚ö†Ô∏è PROBLEMA: {descricao} n√£o tem bot√µes")
                        if not has_js:
                            print(f"   ‚ö†Ô∏è PROBLEMA: {descricao} n√£o tem JavaScript")
                        if not has_tailwind:
                            print(f"   ‚ö†Ô∏è PROBLEMA: {descricao} n√£o tem Tailwind CSS")
                        if not has_fontawesome:
                            print(f"   ‚ö†Ô∏è PROBLEMA: {descricao} n√£o tem FontAwesome")
                            
                    else:
                        print(f"‚ùå {descricao}: {response.status_code}")
                        
                except Exception as e:
                    print(f"‚ùå Erro em {descricao}: {e}")
                    
    except Exception as e:
        print(f"‚ùå Erro ao testar rotas: {e}")

def verificar_templates_especificos():
    """Verifica os templates espec√≠ficos"""
    print("\nüé® VERIFICANDO TEMPLATES ESPEC√çFICOS:")
    
    templates_especificos = [
        "dashboard_avancado.html",
        "relatorios.html"
    ]
    
    templates_dir = Path("app/templates")
    
    for template in templates_especificos:
        template_path = templates_dir / template
        if template_path.exists():
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # Verificar elementos
                extends_base = '{% extends "base_modern.html" %}' in content
                has_buttons = 'href=' in content or 'onclick=' in content
                has_js = '<script>' in content
                has_tailwind = 'tailwind' in content.lower()
                has_fontawesome = 'fas fa-' in content
                
                print(f"\nüìÑ {template}:")
                print(f"   - Estende base_modern: {'‚úÖ' if extends_base else '‚ùå'}")
                print(f"   - Tem bot√µes: {'‚úÖ' if has_buttons else '‚ùå'}")
                print(f"   - Tem JavaScript: {'‚úÖ' if has_js else '‚ùå'}")
                print(f"   - Tem Tailwind: {'‚úÖ' if has_tailwind else '‚ùå'}")
                print(f"   - Tem FontAwesome: {'‚úÖ' if has_fontawesome else '‚ùå'}")
                
                if not extends_base:
                    print(f"   ‚ö†Ô∏è PROBLEMA: {template} n√£o estende base_modern.html")
                if not has_buttons:
                    print(f"   ‚ö†Ô∏è PROBLEMA: {template} n√£o tem bot√µes")
                if not has_js:
                    print(f"   ‚ö†Ô∏è PROBLEMA: {template} n√£o tem JavaScript")
                    
        else:
            print(f"‚ùå {template} n√£o encontrado")

def verificar_rotas_no_codigo():
    """Verifica se as rotas est√£o definidas no c√≥digo"""
    print("\nüîß VERIFICANDO ROTAS NO C√ìDIGO:")
    
    routes_file = Path("app/routes.py")
    if routes_file.exists():
        with open(routes_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
            # Verificar se as rotas est√£o definidas
            has_dashboard = '@app.route(\'/dashboard_avancado\')' in content
            has_relatorios = '@app.route(\'/relatorios\')' in content
            
            print(f"   - Dashboard avan√ßado: {'‚úÖ' if has_dashboard else '‚ùå'}")
            print(f"   - Relat√≥rios: {'‚úÖ' if has_relatorios else '‚ùå'}")
            
            if not has_dashboard:
                print("   ‚ö†Ô∏è PROBLEMA: Rota dashboard_avancado n√£o encontrada")
            if not has_relatorios:
                print("   ‚ö†Ô∏è PROBLEMA: Rota relatorios n√£o encontrada")
    else:
        print("‚ùå app/routes.py n√£o encontrado")

def mostrar_solucoes_especificas():
    """Mostra solu√ß√µes espec√≠ficas"""
    print("\nüîß SOLU√á√ïES ESPEC√çFICAS:")
    print("=" * 30)
    
    print("\n1Ô∏è‚É£ **Se os bot√µes n√£o funcionam no dashboard/relat√≥rios:**")
    print("   - Verifique se as rotas est√£o definidas em app/routes.py")
    print("   - Verifique se os templates estendem base_modern.html")
    print("   - Verifique se h√° JavaScript nos templates")
    
    print("\n2Ô∏è‚É£ **Se as p√°ginas n√£o carregam:**")
    print("   - Verifique se as rotas est√£o corretas")
    print("   - Verifique se h√° erros no console (F12)")
    print("   - Teste acessando URLs diretamente")
    
    print("\n3Ô∏è‚É£ **Se o CSS n√£o carrega:**")
    print("   - Verifique se Tailwind CSS est√° sendo carregado")
    print("   - Verifique se FontAwesome est√° sendo carregado")
    print("   - Teste em modo inc√≥gnito")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTE ESPEC√çFICO - DASHBOARD E RELAT√ìRIOS")
    print("=" * 50)
    
    # Executar testes espec√≠ficos
    testar_rotas_especificas()
    verificar_templates_especificos()
    verificar_rotas_no_codigo()
    
    # Mostrar solu√ß√µes
    mostrar_solucoes_especificas()
    
    print("\n" + "=" * 50)
    print("üéØ PR√ìXIMOS PASSOS:")
    print("1. Se encontrou problemas nas rotas:")
    print("   - Verifique se as rotas est√£o definidas em app/routes.py")
    print("   - Verifique se os templates existem")
    
    print("\n2. Se encontrou problemas nos templates:")
    print("   - Corrija os templates que n√£o estendem base_modern.html")
    print("   - Adicione JavaScript se necess√°rio")
    
    print("\nüí° DICA IMPORTANTE:")
    print("Se as p√°ginas carregam mas os bot√µes n√£o funcionam,")
    print("o problema pode ser de JavaScript ou CSS n√£o carregando")

if __name__ == "__main__":
    main() 