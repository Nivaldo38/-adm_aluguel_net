"""
Servi√ßo de Notifica√ß√µes Autom√°ticas
"""

import os
import json
import smtplib
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from app import app, db
from app.models import Boleto, Contrato, Inquilino, Unidade
from app.email_service import email_service

class NotificationService:
    def __init__(self):
        self.notifications_dir = os.path.join(os.getcwd(), 'notifications')
        self.log_file = os.path.join(self.notifications_dir, 'notification_log.json')
        
        # Criar diret√≥rio se n√£o existir
        if not os.path.exists(self.notifications_dir):
            os.makedirs(self.notifications_dir)
    
    def check_boletos_vencendo(self):
        """Verifica boletos vencendo nos pr√≥ximos 3 dias"""
        hoje = datetime.now().date()
        tres_dias = hoje + timedelta(days=3)
        
        boletos_vencendo = Boleto.query.filter(
            Boleto.status == 'pendente',
            Boleto.data_vencimento >= hoje,
            Boleto.data_vencimento <= tres_dias
        ).all()
        
        for boleto in boletos_vencendo:
            self.send_boleto_vencimento_notification(boleto)
    
    def check_contratos_vencendo(self):
        """Verifica contratos vencendo nos pr√≥ximos 30 dias"""
        hoje = datetime.now().date()
        trinta_dias = hoje + timedelta(days=30)
        
        contratos_vencendo = Contrato.query.filter(
            Contrato.situacao == 'Ativo',
            Contrato.data_fim.isnot(None),
            Contrato.data_fim >= hoje,
            Contrato.data_fim <= trinta_dias
        ).all()
        
        for contrato in contratos_vencendo:
            self.send_contrato_vencimento_notification(contrato)
    
    def check_unidades_manutencao(self):
        """Verifica unidades em manuten√ß√£o h√° mais de 7 dias"""
        hoje = datetime.now().date()
        sete_dias = hoje - timedelta(days=7)
        
        # Aqui voc√™ pode adicionar l√≥gica para verificar unidades em manuten√ß√£o
        # Por enquanto, vamos apenas logar
        unidades_manutencao = Unidade.query.filter_by(status='manutencao').all()
        
        if unidades_manutencao:
            self.send_manutencao_notification(unidades_manutencao)
    
    def send_boleto_vencimento_notification(self, boleto):
        """Envia notifica√ß√£o de boleto vencendo"""
        try:
            contrato = boleto.contrato
            inquilino = contrato.inquilino
            
            if not inquilino.email:
                print(f"‚ö†Ô∏è Inquilino {inquilino.nome} n√£o tem email cadastrado")
                return False
            
            # Calcular dias at√© vencimento
            dias_vencimento = (boleto.data_vencimento - datetime.now().date()).days
            
            subject = f"Boleto vence em {dias_vencimento} dias - {contrato.unidade.nome}"
            
            # Template do email
            html_content = f"""
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
                    <h1>üè† Sistema de Administra√ß√£o de Aluguel</h1>
                    <h2>Lembrete de Boleto</h2>
                </div>
                
                <div style="padding: 20px; background: #f8f9fa;">
                    <h3>Ol√°, {inquilino.nome}!</h3>
                    
                    <p>Este √© um lembrete sobre seu boleto de aluguel:</p>
                    
                    <div style="background: white; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #28a745;">
                        <h4>üìã Detalhes do Boleto</h4>
                        <p><strong>Unidade:</strong> {contrato.unidade.nome}</p>
                        <p><strong>M√™s de Refer√™ncia:</strong> {boleto.mes_referencia}</p>
                        <p><strong>Valor Total:</strong> R$ {boleto.valor_total:.2f}</p>
                        <p><strong>Data de Vencimento:</strong> {boleto.data_vencimento.strftime('%d/%m/%Y')}</p>
                        <p><strong>Dias Restantes:</strong> {dias_vencimento} dias</p>
                    </div>
                    
                    <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #ffc107;">
                        <h4>‚ö†Ô∏è Importante</h4>
                        <p>Para evitar juros e multas, pague seu boleto at√© a data de vencimento.</p>
                    </div>
                    
                    <div style="text-align: center; margin: 20px 0;">
                        <a href="#" style="background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                            üìÑ Ver Boleto Completo
                        </a>
                    </div>
                </div>
                
                <div style="background: #e9ecef; padding: 15px; text-align: center; font-size: 12px; color: #6c757d;">
                    <p>Este √© um email autom√°tico do sistema de administra√ß√£o de aluguel.</p>
                    <p>Em caso de d√∫vidas, entre em contato conosco.</p>
                </div>
            </div>
            """
            
            # Enviar email
            success = email_service.send_email(
                to_email=inquilino.email,
                subject=subject,
                body="Notifica√ß√£o de boleto vencendo",
                html_body=html_content
            )
            
            if success:
                self.log_notification('boleto_vencimento', boleto.id, inquilino.email, success=True)
                print(f"‚úÖ Notifica√ß√£o de boleto enviada para {inquilino.email}")
            else:
                self.log_notification('boleto_vencimento', boleto.id, inquilino.email, success=False)
                print(f"‚ùå Erro ao enviar notifica√ß√£o para {inquilino.email}")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar notifica√ß√£o de boleto: {e}")
            return False
    
    def send_contrato_vencimento_notification(self, contrato):
        """Envia notifica√ß√£o de contrato vencendo"""
        try:
            inquilino = contrato.inquilino
            
            if not inquilino.email:
                print(f"‚ö†Ô∏è Inquilino {inquilino.nome} n√£o tem email cadastrado")
                return False
            
            # Calcular dias at√© vencimento
            dias_vencimento = (contrato.data_fim - datetime.now().date()).days
            
            subject = f"Contrato vence em {dias_vencimento} dias - {contrato.unidade.nome}"
            
            # Template do email
            html_content = f"""
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center;">
                    <h1>üè† Sistema de Administra√ß√£o de Aluguel</h1>
                    <h2>Lembrete de Contrato</h2>
                </div>
                
                <div style="padding: 20px; background: #f8f9fa;">
                    <h3>Ol√°, {inquilino.nome}!</h3>
                    
                    <p>Este √© um lembrete sobre seu contrato de aluguel:</p>
                    
                    <div style="background: white; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #17a2b8;">
                        <h4>üìã Detalhes do Contrato</h4>
                        <p><strong>Unidade:</strong> {contrato.unidade.nome}</p>
                        <p><strong>Data de In√≠cio:</strong> {contrato.data_inicio.strftime('%d/%m/%Y')}</p>
                        <p><strong>Data de T√©rmino:</strong> {contrato.data_fim.strftime('%d/%m/%Y')}</p>
                        <p><strong>Valor do Aluguel:</strong> R$ {contrato.valor_aluguel:.2f}</p>
                        <p><strong>Dias Restantes:</strong> {dias_vencimento} dias</p>
                    </div>
                    
                    <div style="background: #d1ecf1; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #17a2b8;">
                        <h4>üí° Pr√≥ximos Passos</h4>
                        <p>Entre em contato conosco para renovar seu contrato ou fazer a devolu√ß√£o da unidade.</p>
                    </div>
                    
                    <div style="text-align: center; margin: 20px 0;">
                        <a href="#" style="background: #28a745; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                            üìÑ Ver Contrato
                        </a>
                    </div>
                </div>
                
                <div style="background: #e9ecef; padding: 15px; text-align: center; font-size: 12px; color: #6c757d;">
                    <p>Este √© um email autom√°tico do sistema de administra√ß√£o de aluguel.</p>
                    <p>Em caso de d√∫vidas, entre em contato conosco.</p>
                </div>
            </div>
            """
            
            # Enviar email
            success = email_service.send_email(
                to_email=inquilino.email,
                subject=subject,
                body="Notifica√ß√£o de contrato vencendo",
                html_body=html_content
            )
            
            if success:
                self.log_notification('contrato_vencimento', contrato.id, inquilino.email, success=True)
                print(f"‚úÖ Notifica√ß√£o de contrato enviada para {inquilino.email}")
            else:
                self.log_notification('contrato_vencimento', contrato.id, inquilino.email, success=False)
                print(f"‚ùå Erro ao enviar notifica√ß√£o para {inquilino.email}")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar notifica√ß√£o de contrato: {e}")
            return False
    
    def send_manutencao_notification(self, unidades):
        """Envia notifica√ß√£o sobre unidades em manuten√ß√£o"""
        try:
            # Email para administrador
            admin_email = "admin@exemplo.com"  # Configurar email do admin
            
            subject = f"Unidades em Manuten√ß√£o - {len(unidades)} unidades"
            
            # Lista de unidades
            unidades_list = ""
            for unidade in unidades:
                unidades_list += f"<li>{unidade.nome} - {unidade.local.nome}</li>"
            
            html_content = f"""
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <div style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); color: white; padding: 20px; text-align: center;">
                    <h1>üè† Sistema de Administra√ß√£o de Aluguel</h1>
                    <h2>Alerta de Manuten√ß√£o</h2>
                </div>
                
                <div style="padding: 20px; background: #f8f9fa;">
                    <h3>Unidades em Manuten√ß√£o</h3>
                    
                    <div style="background: white; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #dc3545;">
                        <h4>üîß Unidades Afetadas</h4>
                        <ul>{unidades_list}</ul>
                    </div>
                    
                    <div style="background: #f8d7da; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #dc3545;">
                        <h4>‚ö†Ô∏è A√ß√£o Necess√°ria</h4>
                        <p>Verifique o status das manuten√ß√µes e atualize quando conclu√≠das.</p>
                    </div>
                </div>
                
                <div style="background: #e9ecef; padding: 15px; text-align: center; font-size: 12px; color: #6c757d;">
                    <p>Este √© um email autom√°tico do sistema de administra√ß√£o de aluguel.</p>
                </div>
            </div>
            """
            
            # Enviar email
            success = email_service.send_email(
                to_email=admin_email,
                subject=subject,
                body="Notifica√ß√£o de manuten√ß√£o",
                html_body=html_content
            )
            
            if success:
                self.log_notification('manutencao', len(unidades), admin_email, success=True)
                print(f"‚úÖ Notifica√ß√£o de manuten√ß√£o enviada para {admin_email}")
            else:
                self.log_notification('manutencao', len(unidades), admin_email, success=False)
                print(f"‚ùå Erro ao enviar notifica√ß√£o para {admin_email}")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar notifica√ß√£o de manuten√ß√£o: {e}")
            return False
    
    def log_notification(self, notification_type, item_id, email, success=True, error_message=None):
        """Registra notifica√ß√£o no log"""
        try:
            log_entry = {
                'type': notification_type,
                'item_id': item_id,
                'email': email,
                'success': success,
                'timestamp': datetime.now().isoformat(),
                'error_message': error_message
            }
            
            # Carregar log existente ou criar novo
            if os.path.exists(self.log_file):
                with open(self.log_file, 'r', encoding='utf-8') as f:
                    log = json.load(f)
            else:
                log = []
            
            log.append(log_entry)
            
            # Manter apenas os √∫ltimos 1000 registros
            if len(log) > 1000:
                log = log[-1000:]
            
            with open(self.log_file, 'w', encoding='utf-8') as f:
                json.dump(log, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao registrar log: {e}")
    
    def get_notification_stats(self):
        """Retorna estat√≠sticas das notifica√ß√µes"""
        try:
            if not os.path.exists(self.log_file):
                return {
                    'total': 0,
                    'success': 0,
                    'failed': 0,
                    'types': {}
                }
            
            with open(self.log_file, 'r', encoding='utf-8') as f:
                log = json.load(f)
            
            stats = {
                'total': len(log),
                'success': len([l for l in log if l.get('success', False)]),
                'failed': len([l for l in log if not l.get('success', True)]),
                'types': {}
            }
            
            # Contar por tipo
            for entry in log:
                notification_type = entry.get('type', 'unknown')
                if notification_type not in stats['types']:
                    stats['types'][notification_type] = 0
                stats['types'][notification_type] += 1
            
            return stats
            
        except Exception as e:
            print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return {
                'total': 0,
                'success': 0,
                'failed': 0,
                'types': {}
            }
    
    def run_daily_checks(self):
        """Executa todas as verifica√ß√µes di√°rias"""
        print("üîî Iniciando verifica√ß√µes di√°rias de notifica√ß√µes...")
        
        # Verificar boletos vencendo
        self.check_boletos_vencendo()
        
        # Verificar contratos vencendo
        self.check_contratos_vencendo()
        
        # Verificar unidades em manuten√ß√£o
        self.check_unidades_manutencao()
        
        print("‚úÖ Verifica√ß√µes di√°rias conclu√≠das!")

# Inst√¢ncia global do servi√ßo
notification_service = NotificationService() 